generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BaileysSession {
  id        String
  sessionId String
  data      String @db.LongText
  serverId  String

  @@id([sessionId, id])
  @@index([sessionId])
  @@index([serverId])
}

model Users {
  id                String              @id @default(uuid())
  name              String
  last_name         String
  email             String
  password          String
  profile_picture   String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  WorkspaceMember   WorkspaceMember[]
  Workspaces        Workspaces[]
  UserNotifications UserNotifications[]
}

model UserNotifications {
  id         String           @id @default(uuid())
  user_id    String
  user       Users            @relation(fields: [user_id], references: [id])
  type       NotificationType
  content    Json?
  date       DateTime         @default(now())
  read       Boolean          @default(false)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
}

enum NotificationType {
  workspace_invite
}

model Workspaces {
  id                String              @id @default(uuid())
  name              String
  owner_id          String
  owner             Users               @relation(fields: [owner_id], references: [id])
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  WorkspaceMember   WorkspaceMember[]
  WorkspaceInstance WorkspaceInstance[]
  Contacts          Contacts[]
}

model WorkspaceMember {
  user_id      String
  user         Users        @relation(fields: [user_id], references: [id])
  workspace_id String
  workspace    Workspaces   @relation(fields: [workspace_id], references: [id])
  role         MemberRole
  status       MemberStatus
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@id([user_id, workspace_id])
}

enum MemberRole {
  owner
  admin
  moderator
  editor
  member
}

enum MemberStatus {
  invited
  accepted
}

model WorkspaceInstance {
  session_id   String     @id @unique
  workspace_id String
  workspace    Workspaces @relation(fields: [workspace_id], references: [id])
  name         String
  phone_number String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  @@index([workspace_id])
}

model Contacts {
  id              String     @id @default(uuid())
  workspace_id    String
  workspace       Workspaces @relation(fields: [workspace_id], references: [id])
  name            String
  phone_number    String
  profile_picture String
  email           String
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
}

model HttpLogs {
  id          String       @id @default(uuid())
  message     String
  userId      String?
  workspaceId String?
  body        Json?
  stack       String?      @db.LongText
  route       String
  method      String
  httpCode    Int
  level       HttpLogLevel
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

enum HttpLogLevel {
  warn
  error
  info
}

model FileStorage {
  id            String    @id
  filename      String
  original_name String
  mimetype      String
  expiration    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}
